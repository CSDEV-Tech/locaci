# This is a basic workflow to help you get started with Actions

name: CI/CD For the Deployment

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - develop

  # Allows you to run this workflow manually from the Actions tab+1
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@646cdf48217256a3d0b80361c5a50727664284f2
        with:
          version: 7.1.0

      - name: Setup Node version
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: "pnpm"

      - name: Install dependencies
        run: FORCE_COLOR=true pnpm install --shamefully-hoist --strict-peer-dependencies=false --frozen-lockfile --ignore-scripts=true

      - name: Build the packages
        run: |
          # Copy env files
          cat > ./web/.env << EOF
          NEXT_PUBLIC_SITE_URL="https://locaci.fredkiss.dev"
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@$DEPLOY_DOMAIN:5434/locaci_db?schema=public"
          OSM_SEARCH_URL=http://$DEPLOY_DOMAIN:8090
          NEXT_PUBLIC_MAPBOX_KEY=${{ secrets.MAPBOX_KEY }}
          NEXT_PUBLIC_OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}
          NEXT_PUBLIC_OAUTH_ISSUER_BASE_URL=${{ secrets.ISSUER_BASE_URL }}
          OAUTH_CLIENT_SECRET=${{ secrets.OAUTH_CLIENT_SECRET }}
          NEXT_PUBLIC_CF_IMAGES_URL=${{ secrets.CF_IMAGES_URL }}
          CF_IMAGES_DOMAIN=${{ secrets.CF_IMAGES_DOMAIN }}
          CF_ACCOUNT_ID=${{ secrets.CF_ACCOUNT_ID }}
          CF_ACCESS_KEY_ID=${{ secrets.CF_ACCESS_KEY_ID }}
          CF_ACCESS_KEY_SECRET=${{ secrets.CF_ACCESS_KEY_SECRET }}
          CF_IMAGES_BUCKET_NAME=${{ secrets.CF_IMAGES_BUCKET_NAME }}
          EOF

          FORCE_COLOR=true pnpm run --filter=web telemetry:disable
          FORCE_COLOR=true pnpm run --filter=web prepare-db
          FORCE_COLOR=true pnpm run turbo run build
        env:
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}
          DEPLOY_DOMAIN: ${{ secrets.DEPLOY_DOMAIN }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DCR_PASSWD: ${{ secrets.DCR_PASSWD }}
          DCR_USER: ${{ secrets.DCR_USER }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Upload build artifact to be sent
        uses: actions/upload-artifact@v3
        with:
          name: next-webapp-build-output
          if-no-files-found: error
          path: ./web/.next
  deploy:
    # The type of runner that the job will run on
    needs:
      - build
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: next-webapp-build-output
          path: .next

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_SERVER_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploy to Server
        run: |
          # Deploy the standalone version first
          rsync -arvzP -e "ssh -p $DEPLOY_PORT" .next/standalone $DEPLOY_USER@$DEPLOY_DOMAIN:$DEPLOY_DIR/
          # Then copy the static files
          scp -P $DEPLOY_PORT .next/static $DEPLOY_USER@$DEPLOY_DOMAIN:$DEPLOY_DIR/.next/static
          scp -P $DEPLOY_PORT ./public $DEPLOY_USER@$DEPLOY_DOMAIN:$DEPLOY_DIR/public

          ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_DOMAIN "
          source ~/.zshrc
          set -e -o errexit
          cd $DEPLOY_DIR

          # Start the 3 pm2 processes
          pm2 stop all || true
          pm2 delete all || true

          echo Starting processes...
          pm2 start ecosystem.config.js
          echo processes succesfully started âœ…
          "
        env:
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}
          DEPLOY_DOMAIN: ${{ secrets.DEPLOY_DOMAIN }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DCR_PASSWD: ${{ secrets.DCR_PASSWD }}
          DCR_USER: ${{ secrets.DCR_USER }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
