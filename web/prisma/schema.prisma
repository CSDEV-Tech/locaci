// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Civility {
    MR
    MME
}

enum Role {
    HOUSING_APPLICANT
    PROPERTY_OWNER
    ADMIN
}

model User {
    id             String   @id @default(uuid()) @db.Uuid
    firstName      String?
    lastName       String?
    phoneNumber    String?
    avatarURL      String?
    email          String   @unique
    role           Role     @default(HOUSING_APPLICANT)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    email_verified Boolean  @default(false)
    civicTitle     Civility @default(MR)

    properties Property[] // A user can have many properties
}

model Room {
    id         String   @id @default(uuid()) @db.Uuid
    type       RoomType @default(BEDROOM)
    Property   Property @relation(fields: [propertyId], references: [id])
    propertyId String   @db.Uuid
}

enum RoomType {
    BEDROOM
    LIVING_ROOM
    KITCHEN
    BATHROOM
    LAUNDRY
    ATTIC
    BASEMENT
    DINING_ROOM
    GARAGE
    BALCONY
    VERANDA
    TERRACE
    TOILET
}

enum AmenityType {
    WIFI
    CABLE
    HOT_WATER
    TWIN_BED
    RADIATOR
    OTHER
}

model Amenity {
    id         String      @id @default(uuid()) @db.Uuid
    type       AmenityType
    name       String?
    Property   Property?   @relation(fields: [propertyId], references: [id])
    propertyId String?     @db.Uuid
}

enum RentType {
    LOCATION
    SHARED_APPARTMENT
    SHORT_TERM
}

model Property {
    id        String   @id @default(uuid()) @db.Uuid
    userId    String   @db.Uuid
    owner     User     @relation(fields: [userId], references: [id]) // A Property have one owner
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // default values
    rentType    RentType @default(LOCATION)
    surfaceArea Int      @default(9)

    noOfRooms Int

    archived  Boolean   @default(false)
    complete  Boolean   @default(false)
    rooms     Room[]
    amenities Amenity[]

    images Json @default("[]") // A JSON Array of uris + name ([{uri, name}]) 

    // Position
    geoData   Json
    longitude String
    latitude  String

    // Address
    city                City         @relation(fields: [cityId], references: [id])
    locality            Locality     @relation(fields: [localityId], references: [id])
    municipality        Municipality @relation(fields: [municipalityId], references: [id])
    cityId              String       @db.Uuid
    municipalityId      String       @db.Uuid
    localityId          String       @db.Uuid
    addressInstructions String?
    Listing             Listing[]
}

model Listing {
    id                          String   @id @default(uuid()) @db.Uuid
    property                    Property @relation(fields: [propertyId], references: [id])
    propertyId                  String   @db.Uuid
    housingFee                  Int
    description                 String
    housingPeriod               Int
    cautionMonthsPaymentAdvance Int
    agencyMonthsPaymentAdvance  Int
    availableFrom               DateTime
    active                      Boolean  @default(false)
}

model DraftProperty {
    id        String   @id @default(uuid()) @db.Uuid
    userId    String   @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // default values
    rentType    RentType @default(LOCATION)
    surfaceArea Int      @default(9)

    images Json @default("[]") // A JSON Array of uris + name ([{uri, name}]) 

    // address
    cityName            String?
    municipalityName    String?
    localityName        String?
    cityId              String? @db.Uuid
    municipalityId      String? @db.Uuid
    localityId          String? @db.Uuid
    addressInstructions String?

    // Position
    geoData   Json?
    longitude String?
    latitude  String?

    // rooms & amenities
    noOfRooms Int?
    rooms     Json @default("[]") // A JSON Array of ids ([{type}]) 
    amenities Json @default("[]") // A JSON Array of ids ([{type, name}]) 

    // listing details
    housingFee                  Int?
    description                 String?
    housingPeriod               Int?
    cautionMonthsPaymentAdvance Int?
    agencyMonthsPaymentAdvance  Int?
    availableFrom               DateTime?

    // form step
    currentStep PropertyFormStep @default(RENT_TYPE)
}

enum PropertyFormStep {
    RENT_TYPE
    ADDRESS
    INSTRUCTIONS
    ROOMS
    AMENITIES
    IMAGES
    LISTING_DETAILS
    COMPLETE
}

model City {
    id             String         @id @default(uuid()) @db.Uuid
    name           String
    municipalities Municipality[]
    Property       Property[]
}

// Commune
model Municipality {
    id         String     @id @default(uuid()) @db.Uuid
    name       String
    city       City       @relation(fields: [cityId], references: [id])
    cityId     String     @db.Uuid
    localities Locality[]
    Property   Property[]
}

// Quartier
model Locality {
    id             String       @id @default(uuid()) @db.Uuid
    name           String
    municipality   Municipality @relation(fields: [municipalityId], references: [id])
    municipalityId String       @db.Uuid
    Property       Property[]
}
