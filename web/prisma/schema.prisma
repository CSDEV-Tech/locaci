// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String   @id @default(uuid()) @db.Uuid
    firstName      String?
    lastName       String?
    phoneNumber    String?
    email          String   @unique
    role           Role     @default(HOUSING_APPLICANT)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    email_verified Boolean  @default(false)
    civicTitle     Civility @default(MR)

    properties       Property[] // A user can have many properties
    RequestOwnerRole RequestOwnerRole?
}

enum Role {
    HOUSING_APPLICANT
    PROPERTY_OWNER
    ADMIN
}

enum Civility {
    MR
    MME
}

model RequestOwnerRole {
    id                String        @id @default(uuid()) @db.Uuid
    validatedAt       DateTime?
    status            RequestStatus @default(WAITING)
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    reasonForRefusing String?

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.Uuid
}

enum RequestStatus {
    WAITING
    GRANTED
    REFUSED
}

model Room {
    id   String   @id @default(uuid()) @db.Uuid
    type RoomType @default(BEDROOM)
}

enum RoomType {
    BEDROOM
    LIVING_ROOM
    KITCHEN
    BATHROOM
    LAUDRY
    ATTIC
    BASEMENT
    DINING_ROOM
    GARAGE
    BALCONY
    VERANDA
    TERRACE
}

model Property {
    id          String   @id @default(uuid()) @db.Uuid
    rentType    RentType @default(LOCATION)
    userId      String   @db.Uuid
    owner       User     @relation(fields: [userId], references: [id]) // A Property have one owner
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    archived    Boolean  @default(false)
    noOfRooms   Int
    surfaceArea Int
    city        String
    commune     String
    locality    String

    // Position
    longitude      String
    latitude       String
    // Bounding box limits
    bbMinLongitude String
    bbMinLatitude  String
    bbMaxLongitude String
    bbMaxLatitude  String
}

enum RentType {
    LOCATION
    SHARED_APPARTMENT
    SHORT_TERM
}

model City {
    id             String         @id @default(uuid()) @db.Uuid
    name           String
    municipalities Municipality[]
}

// Commune
model Municipality {
    id         String     @id @default(uuid()) @db.Uuid
    name       String
    city       City       @relation(fields: [cityId], references: [id])
    cityId     String     @db.Uuid
    localities Locality[]
}

// Quartier
model Locality {
    id             String       @id @default(uuid()) @db.Uuid
    name           String
    municipality   Municipality @relation(fields: [municipalityId], references: [id])
    municipalityId String       @db.Uuid
}
