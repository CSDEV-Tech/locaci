import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { trpc } from '../utils/trpc-rq-hooks';

// All these imports are necessary SSG & SSR
import { appRouter } from '../server/trpc/router';
import type { AppRouter } from '../server/trpc/router';
import { createProxySSGHelpers } from '@trpc/react/ssg';
import { createContext } from '../server/trpc/context';
import superjson from 'superjson';

const Home: NextPage = () => {
    const { data, isLoading, isError, error } =
        trpc.proxy.property.getLastThreeCreated.useQuery(undefined, {
            staleTime: Infinity,
            retry: 2
        });

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex flex-col gap-4 items-center justify-center min-h-screen p-4 bg-dark text-white">
                <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-primary">
                    LOCACI
                </h1>

                {isLoading && <p className="text-lg">LOADING...</p>}
                {isError && (
                    <div className="text-lg">
                        Error : <div>{error.toString()}</div>
                    </div>
                )}

                <div>{data && <pre>{JSON.stringify(data, null, 2)}</pre>}</div>
            </main>
        </>
    );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
    const ssg = createProxySSGHelpers<AppRouter>({
        router: appRouter,
        ctx: await createContext(),
        transformer: superjson
    });

    await ssg.property.getLastThreeCreated.fetch();

    return {
        props: {
            trpcState: ssg.dehydrate()
        }
    };
};
