import * as React from 'react';
import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { trpc, createSSGHelpers } from '../utils/trpc';
import { Button, TextInput } from '@locaci/ui';
import { getHostWithScheme } from '../lib/functions';
import { supabase } from '../utils/supabase-client';

const Home: NextPage = () => {
    const data = trpc.useQuery(['property.getLastThreeCreated'], {
        staleTime: Infinity
    });

    const [email, setEmail] = React.useState('');

    async function login(email: string) {
        await supabase.auth.signIn(
            {
                email
            },
            {
                redirectTo: `${getHostWithScheme(
                    window.location.href
                )}/auth/callback`
            }
        );
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex flex-col gap-4 items-center justify-center min-h-screen p-4 bg-dark text-white">
                <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-primary">
                    LOCACI
                </h1>

                <form
                    className="flex flex-col gap-4 items-stretch"
                    onSubmit={e => {
                        e.preventDefault();
                        login(email);
                    }}>
                    <TextInput
                        type="email"
                        value={email}
                        label="Email"
                        onChange={setEmail}
                    />
                    <Button variant="hollow" type="submit" block>
                        Login with email
                    </Button>
                </form>
                <div>
                    {data.data!.map(p => (
                        <pre key={p.id}>{JSON.stringify(p, null, 2)}</pre>
                    ))}
                </div>
            </main>
        </>
    );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
    const ssg = await createSSGHelpers();

    await ssg.fetchQuery('property.getLastThreeCreated');

    return {
        props: {
            trpcState: ssg.dehydrate()
        }
    };
};
